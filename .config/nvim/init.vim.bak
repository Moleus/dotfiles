""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Install Plugins 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')


if !exists('g:vscode')

Plug 'easymotion/vim-easymotion'                        " jump to any letter on page easily 
Plug 'https://github.com/powerman/vim-plugin-ruscmd'    " rus layout command mode 
Plug 'https://github.com/tpope/vim-commentary'          " add comments by pressing gc + any direction
Plug 'https://github.com/tpope/vim-surround'            " surrounds everything with anything; cs'<h1>  
Plug 'jiangmiao/auto-pairs'                             " autoclose brakets 
Plug 'kien/ctrlp.vim'                                   " search in buffers, directories, files
Plug 'morhetz/gruvbox'                                  " colorchemes
" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " quick file explorer
Plug 'tmhedberg/SimpylFold'                             " hide functions 
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'                          " bottom status bar
Plug 'vim-syntastic/syntastic'                          " syntax highlighting
" Plug 'ycm-core/YouCompleteMe'                           " autocomplete for languages 
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'     " snippets for coding
Plug 'ervandew/supertab'                                " peace YCM with Ultisnips
Plug 'airblade/vim-gitgutter'                           " show git diff changes on the left bar
Plug 'wellle/targets.vim'       
" Plug "lyokha/vim-xkbswitch"
" Plug '907th/vim-auto-save'


" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}   " config generator for youcompleteme 
" Plug 'rking/ag.vim'                                   " search in directories replacement for ack
" Plug 'makerforceio/CoVim'
" Plug 'nvie/vim-flake8'                                  " PEP 8 checking            
" Plug 'tpope/vim-unimpaired'

endif
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mouse and keyboard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:mapleader=' '		                 " remap Leader key

"disable touchpad when typing
autocmd VimEnter 'syndaemon -i 1 -K -d'

" hide mouse cursor when typing
if !has('nvim')
	set mousehide 
	" enable mouse scroll
	set mouse=
	set ttymouse=
endif


" copy to global clipboard
noremap <Leader>y "+y
noremap <Leader>p "+p
" set clipboard=unnamedplus
" let g:clipboard = ['xclip']
" don't clear clipboard on exit
autocmd VimLeave * call system("xsel -ib", getreg('+'))

" add spaces in normal mode. Doesn't work if space is your leader key
nnoremap <space> i<space><esc>

" Backspace normal delete in insert mode
set backspace=indent,eol,start whichwrap+=<,>,[,]


" Slow exiting from insert mode fix
set timeoutlen=1000
set ttimeoutlen=50

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lines
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" numerate lines
set number                             
" relative line numbering
set relativenumber                     

" do not automatically wrap on load
set nowrap           
" set formatoptions-=t " do not automatically wrap text when typing

" turn off autopairs and tabs
set pastetoggle=<F3>

" Remove tabs highlighting
set showtabline=1

" no comments when pressing O or o
autocmd FileType * setlocal formatoptions-=cro 

" indents
set nosmartindent
set cindent
filetype plugin indent on
set cinkeys-=0#
set indentkeys-=0#

" tabs and comments pluging
autocmd FileType * setlocal ts=4 sts=4 sw=4
autocmd FileType sh setlocal ts=4 sts=4 sw=4 commentstring=#\ %s
autocmd FileType cpp,c setlocal ts=2 sts=2 sw=2 commentstring=//\ %s
autocmd FileType arduino setlocal ts=2 sts=2 sw=2 commentstring=//\ %s
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 commentstring=/*\ %s\ */ 
autocmd FileType python setlocal ts=4 sts=4 sw=4 commentstring=#\ %s
autocmd FileType html setlocal ts=2 sts=2 sw=2 commentstring=<!--\%s-->
autocmd FileType css setlocal ts=4 sts=4 sw=4 commentstring=/*\ %s */

" Turn on smartindents in .py files after keywords
" autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
 
" specift ctags file (search for references in project)
autocmd BufRead *.* set tags=./tags;

"new line without insert mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Style and spell check
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax on	         " turn on syntax highlight
set background=dark      " set vim dark theme
if !exists('g:vscode')
colorscheme gruvbox      " customize theme
endif

" set language spell chech
" set spelllang=en_us,ru_ru
" set spell

set termencoding=utf-8 "for russion letters
set novisualbell "No blinking
set t_vb= "Turn beeping off

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim search options
set hlsearch
set incsearch
" ignore case when searching
set ignorecase
" sense case when typing with Upper case
set smartcase

" replace highlighted word 
nnoremap <Leader>r :%s///g<Left><Left>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Backup Files and Saves
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" turn on undo after saving file 
if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
  endif

" Turn off .swp and  ~ (backup) files
set nobackup
set noswapfile
set encoding=utf-8  
set fileencodings=utf8,cp1251

" alias when editing as root to save changes press :Sw
command! -nargs=0 Sw w !sudo tee % > /dev/null

" Update bindings when dwm config updated.
" autocmd BufWritePost /usr/local/src/dwm-6.2/config.h !cd /usr/local/src/dwm-6.2; sudo make install && { killall -q dwm;setsid dwm & }
autocmd BufWritePost /usr/local/src/dwm-6.2/config.h !cd /usr/local/src/dwm-6.2; sudo make install 
" Update bindings when dwmblocks config updated.
autocmd BufWritePost /usr/local/src/dwmblocks/config.h !cd /usr/local/src/dwmblocks; sudo make install && { killall -q dwmblocks;setsid dwmblocks & }
" Update bindings when sxhkdrc is updated.
autocmd BufWritePost *sxhkdrc !killall sxhkd; setsid sxhkd &
" Update bindings when compton config updated.
autocmd BufWritePost *compton.conf !killall compton; compton&

" map save to 1
" execute "set <M-s>=\es"
" nnoremap <M-s> :w<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Scripts and commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"python with virtualenv support
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

"Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" run python 3.8 shortcut
" ctrl+shift+p to execute script with python3
noremap <C-S>p :!python3.8<Space>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits and windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" create new splits below or to the right
set splitbelow splitright

" open terminal in new split
map <leader>tt :terminal<CR>
" go to normal mode in terminal by pressing esc
" tnoremap <Esc> <C-W>N
" set notimeout ttimeout timeoutlen=100

" resize vim windows with key ars
nnoremap <Up> :resize -2<CR> 
nnoremap <Down> :resize +2<CR>
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Neo Vim - vscode prefs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if exists('g:vscode')

set foldmethod=indent
nmap j gj
nmap k gk

endif




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:vscode')

let g:ycm_register_as_syntastic_checker = 0 "default 1
let g:ycm_show_diagnostics_ui = 1 "default 1

"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '/usr/bin/python3.8' "default ''


let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info

let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 0

let g:ycm_autoclose_preview_window_after_completion=1

let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_key_invoke_completion = '<C-Space>'

nnoremap <C-F11> :YcmForceCompileAndDiagnostics <CR>

let g:ycm_filetype_whitelist = {'*': 1}
" let g:ycm_filetype_whitelist = {
" 			\ "c":1,
" 			\ "cpp":1,
" 			\ "sh":1,
" 			\ "zsh":1,
" 			\ "python":1,
" 			\ }

map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" let g:ycm_clangd_binary_path = '/home/buka/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clangd'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" auto-brackets (autoclosing)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"for alt works correctly
"execute "set <M-e>=\ee"
"nnoremap <M-e> e
"execute "set <M-b>=\eb"
"nnoremap <M-b> b
" let g:AutoPairsFlyMode = 1
" let g:AutoPairsShortcutBackInsert = '<M-b>'
"let g:AutoPairsShortcutToggle = 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SimplyFold Plugin
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Folding for *.py
" autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
" autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
let g:SimpylFold_fold_docstring = 1
let g:SimpylFold_docstring_preview = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:vscode')

let g:syntastic_python_flake8_exec = 'flake8'
let g:syntastic_python_checkers = ['flake8']
	
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

let g:syntastic_auto_loc_list = 2
" let g:syntastic_enable_balloons = 0
let g:syntastic_loc_list_height = 5
let g:syntastic_python_flake8_args = '--ignore=E501 --max-line-length=100'

" let g:syntastic_html_checkers = []
" let g:syntastic_java_checkers = []
" let g:syntastic_javascript_checkers = []
" let g:syntastic_json_checkers = ['jsonlint']
" let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_ruby_checkers = ['mri']
" let g:syntastic_sh_checkers = ['shellcheck']

" tests
" let g:Syntastic_enable_signs = 1 "does nothing???
" highlight SyntasticErrorSign guifg=blue guibg=red

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP plugin settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
" map <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

" gitify plugin remaps
nmap <leader>gj :diffget //3<CR>
nmap <leader>gf :diffget //2<CR>
nmap <leader>gs :G<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NerdTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"mappings
map <C-n> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easymotion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map <Leader> <Plug>(easymotion-prefix)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CoVim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let CoVim_default_name = "buka"
let CoVim_default_port = "8555"  

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ultisnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-auto-save
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:auto_save_events = ["InsertLeave"]
nnoremap <F9> :AutoSaveToggle<CR>

endif
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"				The END
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
